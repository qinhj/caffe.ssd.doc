From 2cca75a42557bf86128862931236b0b400f1aa18 Mon Sep 17 00:00:00 2001
From: qinhj <qinhj@lsec.cc.ac.cn>
Date: Wed, 9 Jun 2021 17:40:27 +0800
Subject: [PATCH 5/5] [debug] add more output info

---
 examples/ssd/ssd_detect.py           | 22 ++++++++++++++--------
 src/caffe/layers/prior_box_layer.cpp | 21 +++++++++++++++++++++
 2 files changed, 35 insertions(+), 8 deletions(-)

diff --git a/examples/ssd/ssd_detect.py b/examples/ssd/ssd_detect.py
index 38505d3a..13a37013 100644
--- a/examples/ssd/ssd_detect.py
+++ b/examples/ssd/ssd_detect.py
@@ -47,8 +47,9 @@ class CaffeDetection:
         self.net = caffe.Net(model_def,      # defines the structure of the model
                              model_weights,  # contains the trained weights
                              caffe.TEST)     # use test mode (e.g., don't perform dropout)
-         # input preprocessing: 'data' is the name of the input blob == net.inputs[0]
-        self.transformer = caffe.io.Transformer({'data': self.net.blobs['data'].data.shape})
+        # input preprocessing: 'data' is the name of the input blob == net.inputs[0]
+        #self.transformer = caffe.io.Transformer({'data': self.net.blobs['data'].data.shape})
+        self.transformer = caffe.io.Transformer({'data': (1, 3, image_resize, image_resize)})
         self.transformer.set_transpose('data', (2, 0, 1))
         self.transformer.set_mean('data', np.array([104, 117, 123])) # mean pixel
         # the reference model operates on images in [0,255] range instead of [0,1]
@@ -84,6 +85,8 @@ class CaffeDetection:
         det_ymin = detections[0,0,:,4]
         det_xmax = detections[0,0,:,5]
         det_ymax = detections[0,0,:,6]
+        print("output shape:", detections.shape)
+        #print(det_xmin, det_ymin, det_xmax, det_ymax)
 
         # Get detections with confidence higher than 0.6.
         top_indices = [i for i, conf in enumerate(det_conf) if conf >= conf_thresh]
@@ -113,7 +116,7 @@ def main(args):
     detection = CaffeDetection(args.gpu_id,
                                args.model_def, args.model_weights,
                                args.image_resize, args.labelmap_file)
-    result = detection.detect(args.image_file)
+    result = detection.detect(args.image_file, args.threshold)
     print(result)
 
     img = Image.open(args.image_file)
@@ -128,9 +131,8 @@ def main(args):
         draw.rectangle([xmin, ymin, xmax, ymax], outline=(255, 0, 0))
         draw.text([xmin, ymin], item[-1] + str(item[-2]), (0, 0, 255))
         print("item:", item)
-        print("bbox:", xmin, ymin, xmax, ymax)
-        print([xmin, ymin], item[-1])
-    img.save('detect_result.jpg')
+        print("bbox:", xmin, ymin, xmax, ymax, item[-1])
+    img.save(args.output)
 
 
 def parse_args():
@@ -141,11 +143,15 @@ def parse_args():
                         default='data/VOC0712/labelmap_voc.prototxt')
     parser.add_argument('--model_def',
                         default='models/VGGNet/VOC0712/SSD_300x300/deploy.prototxt')
+#                        default='models/VGGNet/VOC0712/SSD_512x512/deploy.prototxt')
     parser.add_argument('--image_resize', default=300, type=int)
     parser.add_argument('--model_weights',
-                        default='models/VGGNet/VOC0712/SSD_300x300/'
-                        'VGG_VOC0712_SSD_300x300_iter_120000.caffemodel')
+                        default='models/VGGNet/VOC0712/'
+                        'SSD_300x300/VGG_VOC0712_SSD_300x300_iter_120000.caffemodel')
+#                        'SSD_512x512/VGG_VOC0712_SSD_512x512_iter_120000.caffemodel')
     parser.add_argument('--image_file', default='examples/images/fish-bike.jpg')
+    parser.add_argument('--threshold', default=0.5, type=float)
+    parser.add_argument('--output', default='detect_result.jpg')
     return parser.parse_args()
 
 if __name__ == '__main__':
diff --git a/src/caffe/layers/prior_box_layer.cpp b/src/caffe/layers/prior_box_layer.cpp
index d860bb36..d0bd7b30 100644
--- a/src/caffe/layers/prior_box_layer.cpp
+++ b/src/caffe/layers/prior_box_layer.cpp
@@ -104,6 +104,7 @@ void PriorBoxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
       const vector<Blob<Dtype>*>& top) {
   const int layer_width = bottom[0]->width();
   const int layer_height = bottom[0]->height();
+  printf("[%s] layer width: %d, height: %d\n", __FUNCTION__, layer_width, layer_height);
   vector<int> top_shape(3, 1);
   // Since all images in a batch has same height and width, we only need to
   // generate one set of priors which can be shared across all images.
@@ -137,8 +138,28 @@ void PriorBoxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
     step_w = step_w_;
     step_h = step_h_;
   }
+  printf("[%s] layer width: %d, height: %d\n", __FUNCTION__, layer_width, layer_height);
+  printf("[%s] image width: %d, height: %d\n", __FUNCTION__, img_width, img_height);
+  printf("[%s]  step width: %f, height: %f\n", __FUNCTION__, step_w, step_h);
   Dtype* top_data = top[0]->mutable_cpu_data();
   int dim = layer_height * layer_width * num_priors_ * 4;
+  printf("[%s] dim: %d, priors num: %d\n", __FUNCTION__, dim, num_priors_);
+  for (int s = 0; s < min_sizes_.size(); ++s) {
+    int min_size_ = min_sizes_[s];
+    printf("[%s]  min  width: %d, height: %d\n", __FUNCTION__, min_size_, min_size_);
+    if (max_sizes_.size() > 0) {
+      int max_size_ = max_sizes_[s];
+      float box_size_ = sqrt(min_size_ * max_size_);
+      printf("[%s]  box  width: %f, height: %f\n", __FUNCTION__, box_size_, box_size_);
+    }
+    for (int r = 0; r < aspect_ratios_.size(); ++r) {
+      float ar = aspect_ratios_[r];
+      float box_width = min_size_ * sqrt(ar);
+      float box_height = min_size_ / sqrt(ar);
+      printf("[%s]  box  width: %f, height: %f\n", __FUNCTION__, box_width, box_height);
+    }
+  }
+
   int idx = 0;
   for (int h = 0; h < layer_height; ++h) {
     for (int w = 0; w < layer_width; ++w) {
-- 
2.17.1

